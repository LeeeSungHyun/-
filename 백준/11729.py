# 문제
# 세 개의 장대가 있고 첫 번째 장대에는 반경이 서로 다른 n개의 원판이 쌓여 있다. 각 원판은 반경이 큰 순서대로 쌓여있다. 이제 수도승들이 다음 규칙에 따라 첫 번째 장대에서 세 번째 장대로 옮기려 한다.

# 한 번에 한 개의 원판만을 다른 탑으로 옮길 수 있다.
# 쌓아 놓은 원판은 항상 위의 것이 아래의 것보다 작아야 한다.
# 이 작업을 수행하는데 필요한 이동 순서를 출력하는 프로그램을 작성하라. 단, 이동 횟수는 최소가 되어야 한다.

# 아래 그림은 원판이 5개인 경우의 예시이다.



# 입력
# 첫째 줄에 첫 번째 장대에 쌓인 원판의 개수 N (1 ≤ N ≤ 20)이 주어진다.

 

# 출력
# 첫째 줄에 옮긴 횟수 K를 출력한다.

# 두 번째 줄부터 수행 과정을 출력한다. 두 번째 줄부터 K개의 줄에 걸쳐 두 정수 A B를 빈칸을 사이에 두고 출력하는데, 이는 A번째 탑의 가장 위에 있는 원판을 B번째 탑의 가장 위로 옮긴다는 뜻이다.

# 예제 입력 1 
# 3
# 예제 출력 1 
# 7
# 1 3
# 1 2
# 3 2
# 1 3
# 2 1
# 2 3
# 1 3




# def hanoi(n, frm, to, otr):   
#     if n < 2: 
#         print(frm, to)       # frm에서 to로 이동
#         return
#     hanoi(n-1, frm, otr, to) # 맨 아래칸을 제외하고 frm에서 otr로 재귀적 이동
#     print(frm, to)           # 맨아래 원반 목적지로 이동
#     hanoi(n-1, otr, to, frm) # otr로 옮겼던 원반 to로 이동

# n = int(input())
# print((2**n)-1)
# hanoi(n, 1, 3, 2)

# frm = 시작 / to = 목적지 / otr = 중간 들리는 지점






def hanoi(n, frm, to, otr):  # 3개, 시작 1, 끝 3, 중간 2   //  2개 시작 1 끝 3 중간 2   // 1개 시작1 끝3 중간2 // 2개 시작 1 끝 3 중간 2
    if n < 2:                   # 1개라면                                                           
        print(frm, to)       #                                                          // 1,3
        return
    hanoi(n-1, frm, otr, to) # 2개 시작 1, 중간 2, 끝 3  //  1개 시작1, 중간2, 끝3                              // 1개 시작1 중간2 끝3
    print(frm, to)           # 
    hanoi(n-1, otr, to, frm)

n = int(input())
hanoi(n, 1, 3, 2)


hanoi

print(1)
hanoi


# - 하노이의 탑 전체 과정 hanoi(3, 1, 3)을 호출 했을 때
#     - hanoi (2,1,2)
#         - hanoi(1,1,3)
#             - n > 1: False
#             - print 1 → 3 (1번)
#             - n > 1: False
#         - print 1 → 2 (2번)
#         - hanoi(1,3,2)
#             - n > 1: False
#             - print 3 → 2 (3번)
#             - n > 1: False

#     print 1 → 3 (4번)

#     - hanoi (2, 2, 3)